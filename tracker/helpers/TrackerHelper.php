<?php
namespace Craft;

/**
 * TrackerHelper
 *
 * @author    Top Shelf Craft <michael@michaelrog.com>
 * @copyright Copyright (c) 2016, Michael Rog
 * @license   http://topshelfcraft.com/license
 * @see       http://topshelfcraft.com
 * @package   craft.plugins.tracker
 * @since     1.0
 */
class TrackerHelper
{

    /**
     * @var array A map of Google Analytics parameter names to more friendly handles for our template developers.
     */
    static $googleParamNames = array(

        /*
         * Main Parameters
         */

        'adSenseNumber' => 'a', // Random number used to link Google Analytics to Adsense (currently not working)
        'clientId' => 'cid', // Client ID number
        'encodingType' => 'de', // Document Encoding type
        'location'  => 'dl', // URL of the page being viewed.
        'title' => 'dt', // Page title of the page being viewed.
        'flashVersion' => 'fl', // Flash version on the site.
        'nonInteraction' => 'ni', // Non-interaction hit type (1 = yes, 0 = no)
        'javaEnabled' => 'je' , // Whether Java is enabled on the site, (1 = yes, 2 = no)
        'screenDepth' => 'sd', // The view screen's depth.
        'screenResolution' => 'sr', // The view screen's resolution.
        'type' => 't', // The Type of tracking call that triggers the analytics request (e.g. pageview, event).
        'trackingId' => 'tid', // Google Analytics user account number (UA-XXXXXX-X)
        'userLanguage' => 'ul', // Language displayed on the site.
        'version' => 'v', // Protocol version
        'sdkVersion' => '_v', // SDK version number.
        'hitIncrement' => '_s', // Hit Sequence, increments each time an event happens.
        'verificationCode' => '_u', // Verification code generated by GA analytics.js
        'cacheBuster' => 'z', // Functions as a cachebuster.

        /*
         * Override Parameter
         */

        'documentHostNameOverride' => 'dh', // Document host name override
        'documentPathOverride' => 'dp', // Document Path override, used when overriding the standard page name.
        'userAgentOverride' => 'ua', // User agent override.
        'userIpOverride' => 'uip', // User Ip override.
        'screenName' => 'cd', // Screen name, mainly used in app tracking.
        'linkId' => 'linkid', // Link ID of a clicked DOM element.

        /*
         * Events Parameters
         *
         * You will only see any of these when t (type) = event
         */

        'eventAction' => 'ea', // Event Action.
        'eventCategory' => 'ec', // Event Category.
        'eventLabel' => 'el', // Event Label.
        'eventValue' => 'ev', // Event value.

        /*
         * Timing Parameters
         */

        'userTimingCategory' => 'utc', // User timing category, not universal coordinated time.
        'userTimingVarName' => 'utv', // User timing variable name.
        'userTimingTime' => 'utt', // User timing time.
        'userTimingLabel'=> 'utl', // User timing label.
        'pageLoadTime' => 'plt', // Page load time.
        'dnsTime' => 'dns', // DNS time.
        'pageDownloadTime' => 'pdt', // Page download time.
        'redirectResponseTime' => 'rrt', // Redirect response time.
        'tcpConnectTime' => 'tcp', // TCP connect time.
        'serverResponseTime' => 'srt', // Server response time.
        'exceptionDescription' => 'exd', // Exception Description.
        'isExceptionFatal' => 'exf', // Whether exception fatal or not.

        /*
         * Campaign Variable Parameters
         *
         * To register any campaign variables (c*) you MUST populate Campaign Source AND Campaign Medium as a minimum.
         */

        'campaignName' => 'cn', // Campaign name.
        'campaignSource' => 'cs', // Campaign source.
        'campaignMedium' => 'cm', // Campaign medium.
        'campaignKeyword' => 'ck', // Campaign keyword.
        'campaignContent' => 'cc', // Campaign content.
        'campaignId' => 'ci', // Campaign Id.
        'adwordsId' => 'glcid', // Google adwords id.
        'displayAdsId' => 'dclid', // Google display ads id.

        /*
         * eCommerce Parameters
         *
         * You will only see these when t (Type) = transaction or item.
         */

        'currency' => 'cu', // Currency the transaction takes place in.
        'itemName' => 'in', // The item name.
        'itemCode' => 'ic', // The item's sku.
        'itemPrice' => 'ip', // The item's price (per unit).
        'itemQuantity' => 'iq', // Item quantity.
        'itemVariation' => 'iv', // The item's category or variety.
        'transactionAffiliation' => 'ta', // The transaction affiliation.
        'transactionIdentification' => 'ti', // Transaction identification number.
        'transactionRevenueValue' => 'tr', // Transactions' revenue value.
        'transactionShippingValue' => 'ts', // Transactions' shipping value.
        'transactionTaxValue' => 'tv', // Transaction tax value.

        /*
         * App Tracking Parameters
         */

        'applicationId' => 'aid', // Application Id.
        'applicationInstallerId' => 'aiid', // Application installer Id.
        'applicationName' => 'an', // Application Name.
        'applicationVersion' => 'av', // Application version.
        'hitSequence' => 'ht', // Hit sequence.

        /*
         * Other Parameters
         *
         * When using 'anonymizeIp' the key just needs to be there, you can pass it any value, or pass it no value and
         * and it will anonymize the IP.
         */

        'anonymizeIp' => 'aip', // Anonymize IP address.
        'queueTime' => 'qt', // Queue time ( for collecting offline data).
        'sessionControl' => 'sc', // Session Control.
        'userId' => 'uid', // User ID (known uid as opposed to cid).

        /*
         * Google Experiments Parameters
         */

        'experimentId' => 'xid', // The experiment id.
        'experimentVariant' => 'xvar', // The experiment variant.

        /*
         * Social Tracking Parameters
         */

        'socialNetwork' => 'sn', // The social network.
        'socialAction' => 'sa', // Social action.
        'socialActionTarget' => 'st', // The social action target, typically a URL.

    );

	/**
	 * Uses the current user's IP address to generate a valid UUID. If the IP address isn't provided
	 * or isn't valid, we use a generic string instead.
	 *
	 * @param $ip string The current user's IP address, if available.
	 *
	 * @return string A valid UUID in the v4 format (as described at http://www.ietf.org/rfc/rfc4122.txt)
	 */
	public static function generateClientId($ip) {

		if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4))
		{
			$parts = array_map(function ($part) {
				return str_pad($part, 3, '0', STR_PAD_LEFT);
			}, explode('.', $ip));

			$data = implode($parts);
		}
		elseif (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6))
		{
			$parts = array_map(function ($part) {
				return str_pad($part, 4, '0', STR_PAD_LEFT);
			}, explode(':', $ip));

			$data = implode($parts);
		}
		else
		{
			$data = str_repeat(0,32);
		}

		$uuid = str_pad($data, 32, '0', STR_PAD_LEFT);
		$uuid[12] = 4;
		$accepted = ['a', 'b', 8, 9];
		if (!in_array($uuid[16], $accepted, false)) {
			$uuid[16] = 8;
		}

		return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split($uuid, 4));
	}

    /**
     * Consumes an array of user-provided parameters,
     * merges the user-provided parameters with several layers of pre-defined default parameters,
     * and returns the combined list (with Google-style param handles).
     *
     * @param $params array The list of user-provided parameters for this tracker request
     *
     * @return array The assembled list of parameters, with Google-style param keys, for this request.
     */
    public static function getTrackerParams($params = array())
    {
		$clientId = static::generateClientId(craft()->request->getIpAddress());
		$trackingId = craft()->config->get('trackingId', 'tracker');

        $defaults = array(
            'location' => craft()->request->getUrl(),
            'clientId' => $clientId,
            'type' => 'pageview',
            'trackingId' => $trackingId,
            'version' => '1',
        );

        // Instantiate our new params array with the bare minimum

        $assembledParams = static::googleizeParams($defaults);

        // Merge in any general site defaults that are set in the plugin config file.

        $siteDefaults = craft()->config->get('defaultParams', 'tracker');
        if (is_array($siteDefaults))
        {
            $assembledParams = array_merge($assembledParams, static::googleizeParams($siteDefaults));
        }

        // Merge in any environment defaults that are set in the plugin config file.

        $environmentDefaults = craft()->config->get('environmentParams', 'tracker');
        if (is_array($environmentDefaults))
        {
            $assembledParams = array_merge($assembledParams, static::googleizeParams($environmentDefaults));
        }

        // Merge in any user-provided params for this request

        if (is_array($params))
        {
            $assembledParams = array_merge($assembledParams, static::googleizeParams($params));
        }

        // Return the final assembled list

        return $assembledParams;

    }

    /**
     * URL-encodes the values in a list of parameters
     *
     * @param $params array The list of parameters
     *
     * @return array
     */
    public static function encodeParams($params)
    {

        if (!is_array($params))
        {
            return array();
        }

        $encodedParams = array();

        foreach($params as $k => $v)
        {
            $encodedParams[$k] = urlencode($v);
        }

        return $encodedParams;

    }

    /**
     * Consumes an array of parameters and, for any parameter handle that is defined in $googleParamNames,
     * swaps the friendly-style key with a Google-style parameter handle.
     *
     * @param $params The list of parameters
     *
     * @return array
     */
    public static function googleizeParams($params)
    {

        $googleizedParams = array();

        foreach($params as $k => $v)
        {

            if (isset(static::$googleParamNames[$k]))
            {
                $googleizedParams[static::$googleParamNames[$k]] = $v;
            }
            else
            {
                $googleizedParams[$k] = $v;
            }

        }

        return $googleizedParams;

    }

    /**
     * Assembles a Universal Analytics tracker URL and fires off a request to the Google Analytics service.
     *
     * @param array $params
     *
     * @return bool Whether the tracking request was successful.
     */
    public static function track($params = array())
    {

    	$trackerParams = static::getTrackerParams($params);
		// Removed because params are already encoded by Guzzle
		// $encodedParams = static::encodeParams($trackerParams);

        try
        {

            $client = new \Guzzle\Http\Client();
            $request = $client->post(
            	'https://www.google-analytics.com/collect',
				[
					'User-Agent' => craft()->request->getUserAgent()
				],
				$trackerParams
			);
			$gaUrl = UrlHelper::getUrl($request->getUrl(), $trackerParams);
            $response = $request->send();

            if ($response->isSuccessful())
            {
                TrackerPlugin::log("Tracker request SUCCESSFUL: {$gaUrl}");
                return;
            }
            else
            {
                TrackerPlugin::log("Tracker request FAILED: {$gaUrl}", LogLevel::Error);
                return;
            }

        }
        catch(\Exception $e)
        {
            TrackerPlugin::log("Tracker request ERROR. (URL: {$gaUrl}) (Error message: {$e->getMessage()})", LogLevel::Error);
            return false;
        }

    }

}
